import java.text.SimpleDateFormat
import java.util.*
import org.gradle.api.file.FileCollection
import java.util.List
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

buildscript {
    repositories {
	ivy {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
        patternLayout { artifact "[module]/[revision]/[artifact].[ext]" }
        }
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        //mavenCentral()
        maven { url = "https://mvnrepository.com/artifact/" }
        jcenter()

        gradlePluginPortal()

        maven{ url = "https://maven.mcmoddev.com/" }
        maven{ url = "https://jitpack.io" }
        maven{ url = "https://maven.apache.org/" }
        maven{ url = "https://repository.ow2.org/nexus/" }
        maven{
           url = "https://libraries.minecraft.net"
        }
        maven{ url = "https://oss.sonatype.org/content/repositories/snapshots" }

        maven{ url = "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.gradlex:extra-java-module-info:1.5")
        classpath("gradle.plugin.com.github.johnrengelman:shadow:7.1.2")
    }
}

plugins {
    id("net.minecraftforge.gradle") version "6.+"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("java")
    id("wtf.gofancy.fancygradle") version "1.1.+"
   // kotlin("jvm") version "1.9.10"
    id("org.gradlex.extra-java-module-info") version "1.5"
    id("maven-publish")
}

apply {
    plugin("java-base")
   // plugin("kotlin")
    plugin("eclipse")
    plugin("org.gradlex.extra-java-module-info")
    plugin("java")
    plugin("net.minecraftforge.gradle")
    plugin("wtf.gofancy.fancygradle")
    plugin("com.github.johnrengelman.shadow")
    plugin("maven-publish")
}

fancyGradle {
	patches {
		resources
		//coremods
		asm
		mergetool
	}
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            //exclude '**/com/nullptr/mod/party/**'
        }
    }
}

version = "0.1"
java { 
     toolchain { 
         languageVersion.set(JavaLanguageVersion.of(8))
     }
}

group = "com.nullptr.mod"

minecraft {
    mappings("stable", "39-1.12")
	runs {
		configureEach {
			workingDirectory(project.file("run"))
			property("forge.logging.markers", "REGISTRIES")
			property("forge.logging.console.level", "debug")
			mods {
				create(project.name) {
					source(sourceSets.main)
				}
			}
		}

		create("client") {
		}

		create("server") {
			args("--nogui")
		}
		create("data") {
			workingDirectory(project.file("run-data"))
			args(
				"--mod",
				"mod",
				"--all",
				"--output",
				project.file("src/generated/resources/"),
				"--existing",
				project.file("src/main/resources/")
			)
		}
	}
}



extraJavaModuleInfo { 
     failOnMissingModuleInfo.set(false) 
}

configurations {
    shadow.extendsFrom implementation
}

minecraft.runs.all {
	lazyToken("minecraft_classpath") {
		configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
	}
}

dependencies {
    minecraft("net.minecraftforge:forge:1.12.2-14.23.5.2860")
    implementation("org.slf4j:slf4j-api:1.7.25")
    implementation 'org.apache.commons:commons-collections4:4.4'
   // implementation group: 'jflac', name: 'jflac', version: '1.3', ext: 'pom'
    implementation 'net.dv8tion:JDA:4.4.1_353'
    shadow 'net.dv8tion:JDA:4.4.1_353' 
   // implementation("org.slf4j:slf4j-impl:1.7.25")
    implementation("club.minnced:discord-webhooks:0.7.2")
    shadow "club.minnced:discord-webhooks:0.7.2"
    implementation("com.theokanning.openai-gpt3-java:service:0.12.0")
    shadow "com.theokanning.openai-gpt3-java:service:0.12.0"
    implementation("org.apache.commons:commons-collections4:4.4")
    shadow "org.apache.commons:commons-collections4:4.4"
}

jar {
    archiveClassifier.set("mod")
    archiveBaseName.set("mod")
    manifest {

        attributes([

            "Specification-Title": "examplemod",

            "Specification-Vendor": "examplemodsareus",

            "Specification-Version": "1", // We are version 1 of ourselves

            "Implementation-Title": project.name,

            "Implementation-Version": "${version}",

            "Implementation-Vendor" :"examplemodsareus",

            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")

        ])

    }

}


task relocateShadowJar(type: ConfigureShadowRelocation) { 
      target = tasks.shadowJar as ShadowJar 
      prefix = "${project.group}"
}

shadowJar {
	project.configurations.shadow.setTransitive(true)
      //  minimize()
	configurations = [project.configurations.shadow]
	
        mergeServiceFiles()
        //getMainClassName()

        //classifier '' // Replace the default JAR
        //configurations = [project.configurations.library]
        archiveClassifier.set("") 
        manifest.attributes(jar.manifest.getAttributes()) 
        
        dependencies{
	exclude(dependency('opus-java'))
        exclude(dependency('org.jetbrains:annotations'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
        }
	doFirst {
            project.configurations.library.incoming.resolutionResult.allComponents {
                if (it.id instanceof ModuleComponentIdentifier) {
                    def group = it.id.group.replace("-", "")
                    relocate(group, "${project.group}.shadow.${group}")
                }
            }
	}
	finalizedBy('relocateShadowJar')
}

reobf {
	shadowJar {}
}


task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}
tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
}
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')
//jar.
artifacts {
	archives jar
	archives shadowJar
	archives sourcesJar
	//archives javadocJar
}



processResources {
	duplicatesStrategy = "include"

	inputs.property "version", project.version
	inputs.property "mcversion", modMinecraftVersion

	from(sourceSets.main.resources.srcDirs) {
		include("mcmod.info")
		expand("version": project.version, "mcversion": modMinecraftVersion)
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude("mcmod.info")
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
